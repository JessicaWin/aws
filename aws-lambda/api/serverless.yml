service: aws-apigateway-api
frameworkVersion: ">=1.2.0 <2.0.0"
plugins:
  - serverless-pseudo-parameters

custom:
  configFile: ${file(../config.yml)}

provider:
  name: aws
  stage: ${self:custom.configFile.stage}
  variant: ${self:custom.configFile.variant}
  region: ${self:custom.configFile.region}
  deploymentBucket: ${self:custom.configFile.deploymentBucket}
  stackName: ${self:provider.stage}-${self:provider.variant}-${self:service}
  helloFunctionArn:
    Fn::ImportValue: ${self:provider.stage}-${self:provider.variant}-LambdaProxyHelloHandlerArn

resources:
  Resources:
    # api gateway root
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:provider.stage}_${self:provider.variant}_ApiGatewayRootRestApi
        EndpointConfiguration:
          Types:
            - REGIONAL

    # /hello
    ApiGatewayResourceHello:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        ParentId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        PathPart: hello

    RootMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ResourceId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        RestApiId:
          Ref: ApiGatewayRestApi
        HttpMethod: GET
        AuthorizationType: NONE
        MethodResponses:
          - StatusCode: 302
            ResponseParameters:
              method.response.header.Location: true
        Integration:
          Type: MOCK
          RequestTemplates:
            'application/json': '{"statusCode":200}'
          IntegrationResponses:
            - StatusCode: 302

    ApiGatewayMethodHelloPost:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: POST
        RequestParameters: {}
        ResourceId:
          Ref: ApiGatewayResourceHello
        RestApiId:
          Ref: ApiGatewayRestApi
        ApiKeyRequired: false
        AuthorizationType: NONE
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          Uri:
            # Fn::Join object requires two parameters, (1) a string delimiter and (2) a list of strings to be joined
            Fn::Join:
              - ''
              - - 'arn:'
                - Ref: 'AWS::Partition'
                - ':apigateway:'
                - Ref: 'AWS::Region'
                - ':lambda:path/2015-03-31/functions/'
                - ${self:provider.helloFunctionArn}
                - /invocations
        MethodResponses: []
    LambdaProxyHandlerLambdaPermissionApiGateway:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: ${self:provider.helloFunctionArn}
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Join:
            - ''
            - - 'arn:'
              - Ref: 'AWS::Partition'
              - ':execute-api:'
              - Ref: 'AWS::Region'
              - ':'
              - Ref: 'AWS::AccountId'
              - ':'
              - Ref: ApiGatewayRestApi
              - /*/*
  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:provider.stage}-${self:provider.variant}-ApiGatewayRootRestApiId
    ApiGatewayRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:provider.stage}-${self:provider.variant}-ApiGatewayRootResourceId
    ApiGatewayResourceIdHello:
      Value:
        Ref: ApiGatewayResourceHello
      Export:
        Name: ${self:provider.stage}-${self:provider.variant}-ApiGatewayResourceId-hello
    ServiceEndpoint:
      Description: 'URL of the service endpoint'
      Value:
        Fn::Join:
          - ''
          - - 'https://'
            - Ref: ApiGatewayRestApi
            - '.execute-api.'
            - Ref: 'AWS::Region'
            - '.'
            - Ref: 'AWS::URLSuffix'
            - '/'
            - ${self:provider.stage}